.. _muscle(emg)-bioamp-arduino-firmware:

Muscle (EMG) BioAmp Firmware
###############################

What is Electromyography (EMG)?
====================================

Electromyography (EMG) `[1] <https://www.hopkinsmedicine.org/health/treatment-tests-and-therapies/electromyography-emg>`_ is a technique for evaluating and recording the electrical activity produced by skeletal muscles.
EMG is performed using an instrument called an electromyograph to produce a record called an electromyogram. 
An electromyograph detects the electric potential generated by muscle cells
when these cells are electrically or neurologically activated. The signals can be analyzed to detect abnormalities,
activation level, or recruitment order, or to analyze the biomechanics of human or animal movement.
In computer science, EMG is also used as middleware in gesture recognition towards allowing the input of physical action to a computer as a form of human-computer interaction.

To know more about EMG `visit here <https://en.wikipedia.org/wiki/Electromyography>`_.

**Who is this for?**

Anyone who's using the BioAmp Muscle Hardware for the very first time ‚Äî whether you're a student, hobbyist, educator, or just curious. No experience needed!

üëâ To learn about our BioAmp Hardware checkout :ref:`the hardware page <upsidedownlabs_hardware_home>`.

Step-by-Step Setup Guide
===========================

With the hardware in your hands, you're just a few steps away from unlocking its full potential ‚Äî let's get the software set up!

**Step 1: Downloading GitHub Repository for Hardware**

- This is the code your Arduino needs to read Muscle (EMG) signals.
- You have two easy ways to get the code that will help you read your EMG signals:

.. dropdown:: Simply Download (recommended for beginners)
    :open:

    - Go to the GitHub page: `Muscle BioAmp Arduino Firmware <https://github.com/upsidedownlabs/Muscle-BioAmp-Arduino-Firmware>`_
    - Click the green ‚Äú**Code**‚Äù button > Download ZIP
    - Unzip the folder and save it somewhere easy to find.

.. dropdown:: Clone using Git (for tech-savvy users)

      - Install Git for your OS: https://git-scm.com/
      - Clone this GitHub repository using
      
        .. code-block:: bash
            
            git clone https://github.com/upsidedownlabs/Muscle-BioAmp-Arduino-Firmware

**Step 2: Application Required**

Before you start using the kit, please download or open the following: 

1. **Arduino IDE** 
   
   - We need Arduino IDE to upload code to your Arduino board
   - Link to download IDE for your OS: https://www.arduino.cc/en/software

2. **Chords Website**
   
   - We will use Chords Website to visualize the Muscle Signals!
   - Open this website: `Chords Web <https://chords.upsidedownlabs.tech>`_

.. _Connect Your Hardware:

**Step 3: Connect Your Hardware**

1. Plug the Hardware into your Arduino UNO using jumper wires.
2. Follow the exact wiring diagram from the :ref:`hardware documentation <upsidedownlabs_hardware_home>` of the hardware you are using.
3. Hardwares that are compatible with Muscle BioAmp Firmware:

   - :ref:`Bioamp EXG Pill <bioamp-exg-pill>`
   - :ref:`Muscle Bioamp Candy <muscle-bioamp-candy>`
   - :ref:`Muscle Bioamp Patchy <muscle-bioamp-patchy>`
   - :ref:`Muscle Bioamp Blip <muscle-bioamp-blip>`
   - :ref:`Muscle Bioamp Biscute <muscle-bioamp-biscute>`
   - :ref:`Muscle Bioamp Shield <muscle-bioamp-shield>`

It‚Äôs just like putting together a puzzle!

**Step 4: Skin Preparation and Electrodes Placement**

There are two ways use Gel Electrods or Muscle BioAmp Band.

- **Using Gel Electrodes:**

1. **Prepare your skin**

   - Choose the area where you'll place the electrodes.
   - Clean the skin using **an alcohol swab** or **Nuprep Gel** to remove oils and dead cells ‚Äî this improves signal clarity.

   .. note::

      Need help with skin prep? Check out the full guide here: :ref:`Skin Preparation Guide <skin-preparation>`

2. **Attach the wires to the electrodes, then attach the electrodes to the skin**

   - ``IN+`` (positive): Place this on your **inner forearm**.
   - ``IN‚Äì`` (negative): Place **2‚Äì3 cm away from IN+**, following the direction of the muscle fibers.
   - ``REF`` (reference): Place on a **bony or electrically neutral area**, such as the **elbow bone** or **wrist joint**.
   - Refer to the diagram below for accurate placement.
   - Make sure the **sticky side makes firm contact** with the skin for best performance.
   

.. figure:: ../../../guides/usage-guides/skin-preparation/media/skin-prep-emg.png

    :align: center
    :alt: EMG Placement

    EMG Placement


- **Using Muscle BioAmp Band:**

1. Connect the BioAmp cable to Muscle BioAmp Band in a way such that IN+ and IN- are placed on the arm near the ulnar nerve & REF (reference) on the far side of the band.
2. Now put a small drop of electrode gel between the skin and metallic part of BioAmp cable to get the best results

.. figure:: ../../../guides/usage-guides/skin-preparation/media/step-5c.png

    :align: center
    :alt: Muscle BioAmp Band Placement

    Muscle BioAmp Band  Placement


.. _How to upload the Code to Arduino:

**Step 5: How to upload the Code to Arduino**

1. Open the folder you downloaded: **Muscle-BioAmp-Arduino-Firmware**
2. Inside that, you‚Äôll find several subfolders.
3. Pick the folder for the experiment you want to try. (For beginners: start with the first one and move step-by-step through the others for a better learning experience )
4. Inside that folder, open the **.ino** file using **Arduino IDE**
   
- For example:

  - To try raw signal: open ``01_Fixed_Sampling.ino``
  - To try filtered signal: open ``02_EMG_Filter.ino``

.. note::
    You'll find all the experiments listed below, each with :ref:`step-by-step instructions<experiments step by step>`. Just scroll to the one you're working on to get started with the right setup.
   
5. Connect Your Arduino

   - Plug your Arduino board into your computer‚Äôs USB port using the USB cable.
   - Wait for the operating system to install any required USB drivers.

6. In Arduino IDE:

   - Go to **Tools > Board > Arduino UNO** choose the model of your board (e.g., ‚ÄúArduino Uno‚Äù or ‚ÄúArduino Nano‚Äù if you wired to a Nano)
   - Go to **Tools > Port > [select the correct COM port]**

7.	Verify (Compile) the Sketch

        - Click the **‚Äú‚úîÔ∏è Verify‚Äù** button (or press ``Ctrl + R``).
        - Wait for **‚ÄúDone compiling.‚Äù** If errors appear, double-check you opened the correct .ino file.

8.  Click the **‚úì** Upload (or press ``Ctrl + U``) button to send the code to your Arduino.  

    - The IDE will compile again and then send the code to your board.
    - The onboard LED labeled **‚ÄúL‚Äù** may blink during upload. When you see **‚ÄúDone uploading‚Äù**, the new firmware is running.


9. Open Serial Monitor and Serial Plotter (Optional)

   - For serial monitor and plotter, we recommend using `Chords Web <https://chords.upsidedownlabs.tech>`_. However, if you're learning to develop, you might also find these options useful.

   - For Serial Monitor: In the IDE, click **Tools ‚Üí Serial Monitor** (or press ``Ctrl + Shift + M``).
   - Ensure the baud rate at the bottom right of the Serial Monitor is set to ``115200`` (or whatever the sketch‚Äôs Serial.begin(115200); line specifies).
   - You should start seeing lines of numbers. Those are your readings.


   - For Serial Plotter: In the IDE, click **Tools ‚Üí Serial Plotter**.
   - You should start seeing plotting of graph and visualize the waves.

.. important::


    - Remember to close the **Serial Monitor & Serial Plotter** in **Arduino IDE** before starting the Chords Visualizer.

.. _Visualize Your Muscle Signals!:

**Step 6: Visualize Your Muscle Signals!**

1. Open the website: `Chords Web <https://chords.upsidedownlabs.tech>`_
2. Click: **Visualize Now** ‚Üí then choose **Serial Wizard**.
3. Select the correct **COM port** (same one from Arduino IDE).
4. Click **Connect**.

.. important::

    - Always **disconnect your laptop charger** while testing. Why? Charging can introduce 50 Hz noise that affects the signal.


üéâ Now move your hand or clench your fist ‚Äî you‚Äôll see real-time EMG waves on the screen!
    
.. _experiments step by step:

Let's explore all the experiments step by step
===============================================
.. Experiment 1

.. dropdown:: 1. Fixed Sampling
    :open:
    
    **1. Program Purpose & Overview**

    The **Fixed Sampling** sketch demonstrates continuous, regular‚Äêinterval sampling of raw EMG (electromyography) 
    voltage readings from a Muscle BioAmp sensor. By reading analog voltage at a fixed rate 
    (for example, 500 samples per second), you get a stable stream of unfiltered EMG data. 
    This acts as the foundation for every subsequent signal-processing demonstration. 
    Beginners can see what ‚Äúraw‚Äù muscle signals look like before any filtering or envelope detection.

    **2. How It Works**

    1. Initialize the Sensor Pin    
         
       - The sketch sets an Arduino analog input pin (e.g., A0) to read voltage values from the BioAmp sensor.

    2. Set Sampling Rate

       - A timer (using ``micros()`` or ``delayMicroseconds()``) ensures that we call ``analogRead(A0)`` at a precise interval.
       - For instance, reading every 2 millisecond ‚Üí ~500 Hz sampling.

    3. Print Raw Values

       - The user sees raw voltage fluctuations corresponding to muscle contractions.

    4. Loop Forever

       - The ``loop()`` continues indefinitely, constantly reading and printing.
  
    **3. Perform the Hardware**
    
    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/01_Fixed_Sampling) and select ``01_Fixed_Sampling.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 
  
    **6. Running & Observing Results**

    - No Muscle Contraction ‚Üí Raw values will show noise like spikes.
    - Flex Muscle ‚Üí Suddenly values jump up or down.
    - Relax Muscle ‚Üí Values return toward the midpoint.
   
    .. note::

        For a detailed guide, visit our Instructables page: `Visualizing Muscle Signals (EMG) <https://www.instructables.com/Visualizing-Muscle-Signals-EMG-Using-Worlds-Most-A/>`_
    .. Experiment 2

.. dropdown:: 2. EMG Filter
 
    **1. Program Purpose & Overview**

    The **EMG Filter** sketch acquires raw EMG data from a Muscle BioAmp sensor and applies a band‚Äêpass filter 
    (approximately 74.5 Hz‚Äì149.5 Hz) to isolate the muscle signal. 
    By removing low‚Äêfrequency motion artifacts and high‚Äêfrequency noise, you get a cleaner, more stable EMG stream. 
    This filtered output is ideal for downstream tasks like envelope detection or device control.

    **2. How It Works**

    1. Initialize the Sensor Pin    
            
       - The sketch configures an Arduino analog input pin (e.g., A0) to read voltage values from the BioAmp sensor.

    2. Set Sampling Rate

       - A timer (using ``micros()`` or ``delayMicroseconds()``) ensures that we call ``analogRead(A0)`` at a precise interval.
       - For instance, reading every 2 millisecond ‚Üí ~500 Hz sampling.

    3. Apply Band‚ÄêPass Filter
        
       - Each new analog reading is passed through a digital filter (typically implemented via FIR or IIR coefficients). The filter code maintains small arrays (buffers) of recent inputs and outputs, computing a weighted sum to produce a filtered value.
   
    4. Print Raw Values

       - The resulting filtered floating‚Äêpoint value is sent over Serial (e.g., Serial.print(filteredValue);), so you see a smooth EMG waveform.

    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí filter ‚Üí print ‚Üí delay to maintain sampling rate.

    - To learn more about filters and how to generate new filters, visit:  https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`

    **4. Firmware Upload**

    - For this project, go to the repository folder (Muscle-BioAmp-Arduino-Firmware/02_EMG_Filter) and select ``02_EMG_Filter.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - No Muscle Contraction ‚Üí Filtered output hovers near zero (small baseline noise).
    - Flex Muscle ‚Üí You see smooth spikes in the filtered value (e.g., jumps to 0.05‚Äì0.10), with noise removed.
    - Relax Muscle ‚Üí Filtered output returns to baseline smoothly, with minimal fluctuation.

.. Experiment 3

.. dropdown:: 3. EMG Envelope
 
    
    **1. Program Purpose & Overview**

    The **EMG Envelope** sketch reads raw EMG data, applies a band‚Äêpass filter (‚âà 74.5 Hz‚Äì149.5 Hz), 
    then computes the envelope of the filtered signal. The envelope is a smoothed, rectified representation 
    of muscle activation amplitude. It is commonly used in prosthetic control, robotics, and biomedical 
    research to detect when a muscle is contracting and with what strength.

    **2. How It Works**

    1. Initialize the Sensor Pin    
            
       - Read analog values on A0 at a fixed rate (e.g., 500 Hz) and pass each sample through a digital band‚Äêpass filter (implemented via FIR or IIR coefficients).

    2. Full‚ÄêWave Rectification

       - Convert the filtered sample to its absolute value:
    
    ::
        
        float rectified = abs(filteredValue);

    3. Low‚ÄêPass (Smoothing) Filter
        
       - Apply a simple moving average or exponential moving average to rectified to generate a smooth envelope:

    ::

        static float prevEnvelope = 0;

        float alpha = 0.1;
        
        float envelope = alpha * rectified + (1 - alpha) * prevEnvelope;
        
        prevEnvelope = envelope;

    4. Print Envelope

       - Send the smoothed envelope value via Serial.

    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí  filter ‚Üí rectify ‚Üí smooth ‚Üí print ‚Üí delay to maintain sampling rate.

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/03_EMG_Envelope) and select ``03_EMG_Envelope.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`

    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - Relaxed Muscle ‚Üí Envelope values stay near zero.
    - Slow Flex ‚Üí Envelope gradually increases.
    - Strong Flex ‚Üí Envelope peaks higher.
    - Envelope changes smoothly, making thresholds easy to detect.

    .. note::

        For a detailed guide, visit our Instructables page: `Recording Publication Grade Muscle Signals Using BioAmp EXG Pill <https://www.instructables.com/Recording-Publication-Grade-Muscle-Signals-Using-B/>`_
.. Experiment 4

.. dropdown:: 4. Claw Controller
 
        
    **1. Program Purpose & Overview**

    The **Claw Controller** sketch uses EMG envelope data to drive a servo‚Äêpowered ‚Äúclaw‚Äù mechanism. 
    As you flex your muscle, the servo closes the claw; when you relax, it opens. 
    This demonstrates a simple bio‚Äêcontrolled prosthetic or robotic gripper, 
    illustrating how EMG signals can be translated into mechanical movement.
    
    **2. How It Works**

    1. Acquire & Filter (as in EMG_Filter) to obtain a filtered EMG value at ~500 Hz.

    2. Compute Envelope (as in EMG_Envelope) by rectifying and smoothing the filtered sign

    3. Map Envelope to Servo Angle
        
       - Adjust scaling constants so that typical muscle contractions map to 0‚Äì180¬∞.
        
    ::
        
        int angle = map(envelope * 1000, 0, 100, 0, 180);

    4. Servo Control
   
    ::

        #include <Servo.h>
        Servo clawServo;
        ...
        clawServo.attach(9);  // PWM pin 9
        clawServo.write(angle);


    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí filter ‚Üí envelope ‚Üí map ‚Üí write to servo ‚Üí delay.
       

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`
    - Additionally connect:
  
      - Servo VCC (Red) ‚Üí Arduino 5 V (or external 5 V supply for stable power)
      - Servo GND (Black/Brown) ‚Üí Arduino GND (and common ground if external supply used)
      - Servo Signal (Yellow/Orange) ‚Üí Arduino D9 (PWM pin)

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/04_Claw_Controller) and select ``04_Claw_Controller.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - Relaxed Muscle ‚Üí Servo rests at minimum angle (often 0¬∞ or defined ‚Äúopen‚Äù position).
    - Moderate Flex ‚Üí Servo moves partway (e.g., 90¬∞).
    - Strong Flex ‚Üí Servo moves to maximum (180¬∞, claw fully closed).
    - Relax ‚Üí Servo returns to open angle. Adjust mapping if directions are inverted.

    .. note::

        For a detailed guide, visit our Instructables page: `Controlling Servo Claw With Muscle Signals Using Muscle BioAmp Shield <https://www.instructables.com/Controlling-a-Servo-Claw-With-Muscle-Signals-EMG-U/>`_

.. dropdown:: 5. Servo Control
 
        
    **1. Program Purpose & Overview**

    The **Servo Control** sketch is a generic demonstration of using EMG envelope amplitude to drive a 
    single servo motor. Instead of a claw mechanism, it maps envelope directly to any servo‚Äôs rotation angle.
    This example can be repurposed to control robotic arms, wheels, or any servo‚Äêdriven structure based on 
    muscle effort.
    
    **2. How It Works**

    1. Acquire & Filter EMG on A0 at ~500 Hz (same filter as EMG_Filter).

    2. Compute Envelope by rectifying and smoothing the filtered value.

    3. Map Envelope to Servo Angle
        
       - Tweak constants so typical contractions cover the desired servo range.
        
    ::
        
        int angle = map(envelope * 1000, 0, 100, 0, 180);

    4. Servo Control
   
    ::

        #include <Servo.h>
        Servo myServo;
        ...
        myServo.attach(9);
        myServo.write(angle);


    5. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí filter ‚Üí envelope ‚Üí map ‚Üí write ‚Üí delay.
       

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`
    - Additionally connect:
  
      - Servo VCC (Red) ‚Üí Arduino 5 V (or external 5 V supply for stable power)
      - Servo GND (Black/Brown) ‚Üí Arduino GND (and common ground if external supply used)
      - Servo Signal (Yellow/Orange) ‚Üí Arduino D9 (PWM pin)

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/05_Servo_Control) and select ``05_Servo_Control.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - Relaxed Muscle ‚Üí Servo rests at minimum angle (often 0¬∞ or defined ‚Äúopen‚Äù position).
    - Flex Gently ‚Üí Servo moves gradually between 0¬∞ and 180¬∞, proportional to muscle strength.
    - Strong Flex ‚Üí Servo moves to maximum (180¬∞).
    - Relax ‚Üí Servo returns to open angle. Adjust mapping if directions are inverted.


.. dropdown:: 6. LED BarGraph
 
    **1. Program Purpose & Overview**

    The **LED BarGraph** sketch visualizes muscle activation by lighting up a row of LEDs in proportion to EMG envelope
    amplitude. As contraction strength increases, more LEDs turn on (like a VU meter). 
    This provides immediate visual feedback without needing a computer.
    
    **2. How It Works**

    1. Acquire & Filter EMG on A0 at ~500 Hz (band‚Äêpass filter as in EMG_Filter).

    2. Compute Envelope by rectifying and applying a moving average.

    3. Scale Envelope to LED Count
    
    ::
        
        const int NUM_LEDS = 8;

        int numLit = map(envelope * 1000, 0, 100, 0, NUM_LEDS);

    4. Update LEDs
    
    - For each index ``i`` from ``0 to NUM_LEDS‚Äì1``:
  
    ::

        if (i < numLit) digitalWrite(ledPins[i], HIGH);
        else digitalWrite(ledPins[i], LOW);

    1. Loop Forever

       - The ``loop()`` repeats indefinitely: read ‚Üí filter ‚Üí envelope ‚Üí map ‚Üí set LEDs ‚Üí delay (e.g., 10 ms).
       

    **3. Perform the Hardware**

    - Refer to wiring as per instructions given in :ref:`Connect Your Hardware<Connect Your Hardware>`
    - Additionally connect:
  
      - Each LED‚Äôs anode ‚Üí 220 Œ© resistor ‚Üí Arduino digital pins D2‚ÄìD9.
      - Each LED‚Äôs cathode ‚Üí Arduino GND.
      - Tie all grounds together.

    **4. Firmware Upload**

    - For this project, navigate to the repository folder (Muscle-BioAmp-Arduino-Firmware/06_LED_BarGraph) and select ``06_LED_BarGraph.ino``.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    
    **5. Visualize your signal**

    - Follow the steps given in :ref:`Visualize Your Muscle Signals!<Visualize Your Muscle Signals!>` 

    **6. Running & Observing Results**

    - Relaxed Muscle ‚Üí  Few or zero LEDs lit.
    - Flex Gently ‚Üí LEDs light up progressively from LED 1 to LED 8 as envelope increases.
    - Strong Flex ‚Üí All 8 LEDs are lit.
    - Relax ‚Üí LEDs turn off in descending order.

.. dropdown:: 7. Muscle Strength Game

    The **Muscle Strength Game** sketch is an interactive demonstration using the Muscle BioAmp Shield and Arduino (Uno or Nano), often presented inside a creative ‚Äúdashboard‚Äù setup. It reads EMG signals from your arm to control a servo-driven pointer, which moves forward as you flex your muscles.
    
    When your muscle contraction is strong and sustained, the servo pointer advances toward a goal (like ‚Äúbeating Thanos‚Äù). If the contraction weakens or stops, the pointer gradually moves back, encouraging continuous effort. This transforms muscle activity into a fun, visual challenge ‚Äî the harder and longer you flex, the more power you generate, and the more progress you make in the game.
    
    By turning physical effort into real-time feedback, it‚Äôs an engaging way to motivate exercise and rehabilitation.
    
    .. note::

        For a detailed guide, visit our Instructables page: `Making a Muscle Strength Game Using Muscle BioAmp Shield & Arduino Uno <https://www.instructables.com/Making-a-Muscle-Strength-Game-Using-Muscle-BioAmp-/>`_
    

.. dropdown:: 8. EMG Scrolling
 
    The EMG Scrolling sketch lets you scroll content on a screen‚Äîeither a web page, a text document, 
    or a TFT/OLED display‚Äîusing only muscle contractions. Flexing above one threshold scrolls ‚Äúdown,‚Äù and 
    relaxing below another threshold scrolls ‚Äúup.‚Äù This can be a hands-free way to navigate long documents or 
    assist users with limited mobility.

    .. note::
    
        For a detailed guide, visit our Instructables page: `Scroll YouTube Shorts Using 2 Channel EMG Signals <https://www.instructables.com/Scroll-YouTube-Shorts-Using-2-Channel-EMG-Signals/>`_


.. dropdown:: 9. 2 Channel LCD BarGraph

    The **2 Channel LCD BarGraph** sketch reads EMG signals from two separate channels (two BioAmp sensors) 
    and displays their envelopes side by side on a 16√ó2 LCD as two horizontal bar graphs. 
    This allows you to compare left vs. right muscle groups (e.g., left bicep vs. right bicep) in real time. 
    It‚Äôs an educational tool for understanding bilateral muscle activation and for developing applications like 
    adaptive prosthetics that monitor two muscle groups simultaneously.

    .. note::

        For a detailed guide, visit our Instructables page: `Visualizing 2 Channel EMG on LCD Display Module <https://www.instructables.com/Visualizing-2-Channel-EMG-on-LCD-Display-Module/>`_

.. dropdown:: 10. EMG Rehab Game
 
    
    **1. Program Purpose & Overview**

    The **EMG Rehab Game** sketch is a rehabilitation-focused game that challenges patients (or users) 
    to hit specific EMG thresholds for set durations. For example, the game might require a user to hold 
    a muscle contraction for 2 seconds, then relax for 2 seconds, repeating a cycle 10 times. 
    This is helpful in post-injury or post-surgery rehab, where therapists want to measure both muscle strength (peak envelope) 
    and endurance (time held). The game might display feedback on an LCD or via Serial Monitor, encouraging the patient to complete each stage.


    **2. How It Works**

    1.  **Initialize Hardware & Variables**

        - In ``setup()``, call:
        
        ::
            
            pinMode(A0, INPUT);                         // EMG sensor on A0
            Serial.begin(115200);                       // For debugging & prompts
            Wire.begin();                               // For I¬≤C if using LCD
            LiquidCrystal_I2C lcd(0x27, 16, 2);         // If using I¬≤C LCD
            lcd.init();
            lcd.backlight();

            enum State { HOLD, REST, COMPLETE };
            State currentState = HOLD;
            unsigned long stateStartTime = millis();
            int cycleCount = 0;
            const int MAX_CYCLES = 10;                  // Total cycles
            const unsigned long HOLD_DURATION = 2000;   // 2 seconds
            const unsigned long REST_DURATION = 2000;   // 2 seconds
            const float HOLD_THRESHOLD = 0.030;         // Envelope threshold for ‚Äúhold‚Äù
            const float REST_THRESHOLD = 0.005;         // Envelope threshold for ‚Äúrest‚Äù
            float envelope = 0;

        - This sets up the state machine, cycle counter, timings, and thresholds.

    2.  **Sampling, Filtering, and Envelope**

        - In ``loop()``, sample at ~500 Hz (every 2 ms), apply band-pass filter, then compute the envelope:
        
        ::
            
            unsigned long nowMicros = micros();
            if (nowMicros - lastMicros >= 2000) {       // 2000 ¬µs = 2 ms
                lastMicros = nowMicros;
                int rawValue = analogRead(A0);
                float filtered = applyBandPassFilter(rawValue);
                float rectified = abs(filtered);
                envelope = alpha * rectified + (1.0 - alpha) * prevEnvelope;
                prevEnvelope = envelope;
            }

    3.  **State Machine Logic**

        - Track which stage (HOLD, REST, or COMPLETE) the user is in, with ``stateStartTime`` marking the start of that stage:
        
        ::
            
            unsigned long now = millis();
            switch (currentState) {
                case HOLD:
                    if (cycleCount == 0 && now - stateStartTime < 100) {
                        displayMessage("Hold for 2s");
                    }
                    if (envelope >= HOLD_THRESHOLD) {
                        if (now - stateStartTime >= HOLD_DURATION) {
                            currentState = REST;
                            stateStartTime = now;
                            displayMessage("Rest for 2s");
                        }
                    } else {
                        stateStartTime = now;  // Reset hold timer if envelope dips
                    }
                    break;

                case REST:
                    if (envelope <= REST_THRESHOLD) {
                        if (now - stateStartTime >= REST_DURATION) {
                            cycleCount++;
                            if (cycleCount < MAX_CYCLES) {
                                currentState = HOLD;
                                stateStartTime = now;
                                displayMessage("Cycle " + String(cycleCount + 1) + "/10: Hold");
                            } else {
                                currentState = COMPLETE;
                                displayMessage("Exercise Complete!");
                            }
                        }
                    } else {
                        stateStartTime = now;  // Reset rest timer if envelope rises
                    }
                    break;

                case COMPLETE:
                    // Optionally tone a buzzer or stop processing
                    break;
            }

        - **displayMessage(String msg)** can either clear/update the LCD or print via Serial:
        
        ::
            
            void displayMessage(String msg) {
                lcd.clear();
                lcd.setCursor(0, 0);
                lcd.print(msg);
            }
            
            // Or if no LCD:
            
            void displayMessage(String msg) {
                Serial.println(msg);
            }

    4.  **Loop Forever**

        - Each iteration: sample ‚Üí filter ‚Üí envelope ‚Üí update state ‚Üí display prompt ‚Üí delay.

    **3. Perform the Hardware**

    - Refer to :ref:`Connect Your Hardware<Connect Your Hardware>` for sensor wiring.
    - Additionally connect (if using LCD and/or buzzer):

    - **BioAmp Sensor ‚Üí Arduino**  
        
      - BioAmp VCC ‚Üí Arduino 5 V  
      - BioAmp GND ‚Üí Arduino GND  
      - BioAmp OUT ‚Üí Arduino A0  

    - **Optional I¬≤C LCD**  
        
      - LCD VCC ‚Üí Arduino 5 V  
      - LCD GND ‚Üí Arduino GND  
      - LCD SDA ‚Üí Arduino A4 (Uno/Nano)  
      - LCD SCL ‚Üí Arduino A5 (Uno/Nano)  

    - **Optional Buzzer on D10**  
        
      - Buzzer + ‚Üí Arduino D10  
      - Buzzer ‚Äì ‚Üí Arduino GND  

    - Tie all grounds together.

    **4. Firmware Upload**

    - For this project, navigate to `10_EMG_Rehab_Game/EMG_Rehab_Game.ino` and click **Open**.
    - To upload firmware, refer to :ref:`How to upload the Code to Arduino<How to upload the Code to Arduino>`
    - **Also Install & Verify LCD Library (if using LCD)**
    - Go to **Sketch ‚Üí Include Library ‚Üí Manage Libraries‚Ä¶**  
    - Search for **‚ÄúLiquidCrystal I2C‚Äù** and install **LiquidCrystal I2C by Frank de Brabander**.  
    - Confirm the I¬≤C address (e.g., `0x27` or `0x3F`) in code matches your module.

    **5. Visualize Your Signal**

    - **On-Device LCD Prompts**

    - After upload, the LCD shows:
        
    ::

        Hold for 2s
        Cycle 1/10

        
    - After holding 2 seconds above `0.030`, it updates to:
        
    ::

        Rest for 2s
        Cycle 1/10
    
    
    - After resting 2 seconds below `0.005`, it updates to:
        
    ::

        Hold for 2s
        Cycle 2/10
        
    
    - Repeat until:
        
    ::

        Exercise Complete!
    

    - **Serial Monitor (Optional)**

    - Open **Tools ‚Üí Serial Monitor** (115200 baud).  
    - The code prints the same messages via Serial, e.g.:
        
    ::

        Hold for 2s
        Rest for 2s
        Cycle 3/10: Hold
        ‚Ä¶
        Exercise Complete!
    

    - **Serial Plotter (Optional)**

    1. Open **Tools ‚Üí Serial Plotter** (115200 baud).  
    2. Modify the sketch so each loop also prints:
        
    ::
        
        Serial.println(envelope);

    3. The plotter shows the envelope waveform, confirming threshold crossings.

    **6. Running & Observing Results**

    4.  **Program Start**  
        - LCD or Serial displays:
        
    ::

        Hold for 2s
        Cycle 1/10
    

    5.  **Stage 1: Hold for 2 seconds**  
        - Flex your muscle so ``envelope >= 0.030`` continuously.  
        - If envelope dips below `0.030` before 2 s, timer resets.
        - If held for 2000 ms, code switches to **REST**:
        
    ::

        Rest for 2s
        Cycle 1/10
        
    6.  **Stage 2: Rest for 2 seconds**  
        - Relax so ``envelope <= 0.005`` continuously.  
        - If envelope rises above `0.005` too early, rest timer resets.
        - After 2000 ms, `cycleCount` increments to 1, code switches to **HOLD** again:
        
    ::

        Hold for 2s
        Cycle 2/10
  
    7.  **Repeat for 10 Cycles**  
        - Each hold/rest cycle increments `cycleCount`.  
        - Optionally, buzzer beeps once.
        - After Cycle 10, switches to **COMPLETE** and displays:
        
    ::

        Exercise Complete!
        
    8.  **Breaking Early**  
        - If envelope dips below `HOLD_THRESHOLD` during a hold stage, you restart the 2 s hold.  
        - If envelope rises above `REST_THRESHOLD` during rest, you restart the 2 s rest.

    .. dropdown:: Troubleshooting

        - **Message Doesn‚Äôt Appear on LCD**  
        
          - Confirm **LiquidCrystal I2C** is installed and correct I¬≤C address.  
          - Check SDA ‚Üí A4, SCL ‚Üí A5 wiring (or correct pins on other boards).  
          - Adjust LCD contrast potentiometer.

        - **Envelope Never Reaches HOLD_THRESHOLD**  
        
          - Use **Serial Plotter** to watch raw envelope.  
          - Lower **HOLD_THRESHOLD** (e.g., 0.020) so moderate flex registers.  
          - Ensure BioAmp sensor electrodes are firmly attached and grounds are common.

        - **Session Progresses Too Quickly or Slowly**  
        
          - If hold stage completes too easily, raise **HOLD_THRESHOLD** (e.g., to 0.035).  
          - If rest stage never finishes, raise **REST_THRESHOLD** (e.g., to 0.010).

        - **Buzzer Doesn‚Äôt Sound**  
        
          - Verify buzzer + ‚Üí D10 and buzzer ‚Äì ‚Üí GND.  
          - Ensure code calls:
              
        ::
            
            tone(10, 1000, 500);

          - Adjust frequency (1000 Hz) or duration (500 ms) as needed.

        - **Serial Monitor Displays Gibberish**  
        
          - Confirm Serial Monitor baud is **115200**.

        - **LCD Displays Incomplete Text**  
        
          - The code calls ``lcd.clear()`` before each new prompt. If remnants remain, insert:
            
        ::
            
            delay(50);

        to allow the LCD to clear fully.


.. dropdown:: 11. EMG Counter
 
    The **EMG Counter** sketch keeps a running count of how many distinct muscle
    contraction events occur within a session. Each time your EMG envelope
    crosses above a specified threshold (and had previously been below),
    the counter increments by one. This is useful for tracking the number of
    repetitions you perform in an exercise or for monitoring muscle activation events.
    
    .. note::

        For a detailed guide, visit our Instructables page: `Exercise Monitoring Using Wearable Muscle Sensor (EMG) <https://www.instructables.com/Exercise-Monitoring-Using-Wearable-Muscle-Sensor-E/>`_

.. dropdown:: 12. 2 Channel EMG Game Controller
 
    The **2 Channel EMG Game Controller** sketch allows two EMG channels (two separate Muscle BioAmp sensors) 
    to act as independent controls for navigating a cursor or character in a game environment. 
    Channel 1 controls horizontal movement (left/right), and Channel 2 controls vertical movement (up/down).
    By flexing different muscle groups, you can move a dot on a TFT screen, send arrow-key presses to a PC, 
    or manipulate a sprite in a web application.

    For a detailed walkthrough, follow along with the YouTube tutorial for this project:

    .. youtube:: zJ_Ei5tvHiQ

    .. note::

        For a detailed guide, visit our Instructables page: `Controlling Video Games Using Muscle Signals (EMG) <https://www.instructables.com/Controlling-Video-Games-Using-Muscle-Signals-EMG/>`_




‚úÖ **And That‚Äôs it!, Congrats on making your neuroscience project using BioAmp Hardware.**
